// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<AppProvider> adds Context.Provider when rendering 1`] = `
<AppProvider
  contexts={
    Object {
      "some": Object {
        "Consumer": Object {
          "$$typeof": Symbol(react.context),
          "Consumer": [Circular],
          "Provider": Object {
            "$$typeof": Symbol(react.provider),
            "_context": [Circular],
          },
          "_calculateChangedBits": null,
          "_currentRenderer": Object {},
          "_currentRenderer2": null,
          "_currentValue": Object {},
          "_currentValue2": Object {},
          "unstable_read": [Function],
        },
        "Provider": [Function],
      },
    }
  }
>
  <TodosContextProvider>
    <div />
  </TodosContextProvider>
</AppProvider>
`;

exports[`<AppProvider> renders correctly 1`] = `""`;

exports[`<AppProvider> resolves dependencies in contexts 1`] = `
<AppProvider
  contexts={
    Object {
      "contextWithDependency": Object {
        "Consumer": Object {
          "$$typeof": Symbol(react.context),
          "Consumer": [Circular],
          "Provider": Object {
            "$$typeof": Symbol(react.provider),
            "_context": [Circular],
          },
          "_calculateChangedBits": null,
          "_currentRenderer": Object {},
          "_currentRenderer2": null,
          "_currentValue": Object {},
          "_currentValue2": Object {},
          "unstable_read": [Function],
        },
        "Provider": [Function],
      },
      "some": Object {
        "Consumer": Object {
          "$$typeof": Symbol(react.context),
          "Consumer": [Circular],
          "Provider": Object {
            "$$typeof": Symbol(react.provider),
            "_context": [Circular],
          },
          "_calculateChangedBits": null,
          "_currentRenderer": Object {},
          "_currentRenderer2": null,
          "_currentValue": Object {},
          "_currentValue2": Object {},
          "unstable_read": [Function],
        },
        "Provider": [Function],
      },
    }
  }
>
  <TodosContextProvider>
    <use(ContextWithDependencyProvider)>
      <ContextWithDependencyProvider
        some={
          Object {
            "add": [Function],
            "data": Object {
              "list": Array [],
            },
          }
        }
      >
        <div />
      </ContextWithDependencyProvider>
    </use(ContextWithDependencyProvider)>
  </TodosContextProvider>
</AppProvider>
`;

exports[`<AppProvider> works with complex dependencies e.g. A depends on C, B depends both on A and on C 1`] = `
<AppProvider
  contexts={
    Object {
      "a": Object {
        "Consumer": Object {
          "$$typeof": Symbol(react.context),
          "Consumer": [Circular],
          "Provider": Object {
            "$$typeof": Symbol(react.provider),
            "_context": [Circular],
          },
          "_calculateChangedBits": null,
          "_currentRenderer": Object {},
          "_currentRenderer2": null,
          "_currentValue": Object {},
          "_currentValue2": Object {},
          "unstable_read": [Function],
        },
        "Provider": [Function],
      },
      "b": Object {
        "Consumer": Object {
          "$$typeof": Symbol(react.context),
          "Consumer": [Circular],
          "Provider": Object {
            "$$typeof": Symbol(react.provider),
            "_context": [Circular],
          },
          "_calculateChangedBits": null,
          "_currentRenderer": Object {},
          "_currentRenderer2": null,
          "_currentValue": Object {},
          "_currentValue2": Object {},
          "unstable_read": [Function],
        },
        "Provider": [Function],
      },
      "c": Object {
        "Consumer": Object {
          "$$typeof": Symbol(react.context),
          "Consumer": [Circular],
          "Provider": Object {
            "$$typeof": Symbol(react.provider),
            "_context": [Circular],
          },
          "_calculateChangedBits": null,
          "_currentRenderer": Object {},
          "_currentRenderer2": null,
          "_currentValue": Object {},
          "_currentValue2": Object {},
          "unstable_read": [Function],
        },
        "Provider": [Function],
      },
    }
  }
>
  <CProvider>
    <use(AProvider)>
      <AProvider
        c={
          Object {
            "data": "Hello world",
          }
        }
      >
        <use(BProvider)>
          <BProvider
            a={
              Object {
                "data": "Hello world",
              }
            }
            c={
              Object {
                "data": "Hello world",
              }
            }
          >
            <div />
          </BProvider>
        </use(BProvider)>
      </AProvider>
    </use(AProvider)>
  </CProvider>
</AppProvider>
`;

exports[`<Use> renders correctly 1`] = `
<AppProvider
  contexts={
    Object {
      "some": Object {
        "Consumer": Object {
          "$$typeof": Symbol(react.context),
          "Consumer": [Circular],
          "Provider": Object {
            "$$typeof": Symbol(react.provider),
            "_context": [Circular],
          },
          "_calculateChangedBits": null,
          "_currentRenderer": Object {},
          "_currentRenderer2": null,
          "_currentValue": Object {},
          "_currentValue2": Object {},
          "unstable_read": [Function],
        },
        "Provider": [Function],
      },
    }
  }
>
  <TodosContextProvider>
    <use(WrappedComponent)>
      <WrappedComponent
        some={
          Object {
            "add": [Function],
            "data": Object {
              "list": Array [],
            },
          }
        }
      >
        <div />
      </WrappedComponent>
    </use(WrappedComponent)>
  </TodosContextProvider>
</AppProvider>
`;

exports[`<Use> works with complex dependencies e.g. A depends on C, B depends both on A and on C 1`] = `
<AppProvider
  contexts={
    Object {
      "a": Object {
        "Consumer": Object {
          "$$typeof": Symbol(react.context),
          "Consumer": [Circular],
          "Provider": Object {
            "$$typeof": Symbol(react.provider),
            "_context": [Circular],
          },
          "_calculateChangedBits": null,
          "_currentRenderer": Object {},
          "_currentRenderer2": null,
          "_currentValue": Object {},
          "_currentValue2": Object {},
          "unstable_read": [Function],
        },
        "Provider": [Function],
      },
      "b": Object {
        "Consumer": Object {
          "$$typeof": Symbol(react.context),
          "Consumer": [Circular],
          "Provider": Object {
            "$$typeof": Symbol(react.provider),
            "_context": [Circular],
          },
          "_calculateChangedBits": null,
          "_currentRenderer": Object {},
          "_currentRenderer2": null,
          "_currentValue": Object {},
          "_currentValue2": Object {},
          "unstable_read": [Function],
        },
        "Provider": [Function],
      },
      "c": Object {
        "Consumer": Object {
          "$$typeof": Symbol(react.context),
          "Consumer": [Circular],
          "Provider": Object {
            "$$typeof": Symbol(react.provider),
            "_context": [Circular],
          },
          "_calculateChangedBits": null,
          "_currentRenderer": Object {},
          "_currentRenderer2": null,
          "_currentValue": Object {},
          "_currentValue2": Object {},
          "unstable_read": [Function],
        },
        "Provider": [Function],
      },
    }
  }
>
  <CProvider>
    <use(AProvider)>
      <AProvider
        c={
          Object {
            "data": "Hello world",
          }
        }
      >
        <use(BProvider)>
          <BProvider
            a={
              Object {
                "data": "Hello world",
              }
            }
            c={
              Object {
                "data": "Hello world",
              }
            }
          >
            <use(use(use(WrappedComponent)))>
              <use(use(WrappedComponent))
                a={
                  Object {
                    "data": "Hello world",
                  }
                }
              >
                <use(WrappedComponent)
                  a={
                    Object {
                      "data": "Hello world",
                    }
                  }
                  b={
                    Object {
                      "data": "Hello world",
                    }
                  }
                >
                  <WrappedComponent
                    a={
                      Object {
                        "data": "Hello world",
                      }
                    }
                    b={
                      Object {
                        "data": "Hello world",
                      }
                    }
                    c={
                      Object {
                        "data": "Hello world",
                      }
                    }
                  >
                    <div />
                  </WrappedComponent>
                </use(WrappedComponent)>
              </use(use(WrappedComponent))>
            </use(use(use(WrappedComponent)))>
          </BProvider>
        </use(BProvider)>
      </AProvider>
    </use(AProvider)>
  </CProvider>
</AppProvider>
`;

exports[`<Use> works with complex dependencies using arrays 1`] = `
<AppProvider
  contexts={
    Object {
      "a": Object {
        "Consumer": Object {
          "$$typeof": Symbol(react.context),
          "Consumer": [Circular],
          "Provider": Object {
            "$$typeof": Symbol(react.provider),
            "_context": [Circular],
          },
          "_calculateChangedBits": null,
          "_currentRenderer": Object {},
          "_currentRenderer2": null,
          "_currentValue": Object {},
          "_currentValue2": Object {},
          "unstable_read": [Function],
        },
        "Provider": [Function],
      },
      "b": Object {
        "Consumer": Object {
          "$$typeof": Symbol(react.context),
          "Consumer": [Circular],
          "Provider": Object {
            "$$typeof": Symbol(react.provider),
            "_context": [Circular],
          },
          "_calculateChangedBits": null,
          "_currentRenderer": Object {},
          "_currentRenderer2": null,
          "_currentValue": Object {},
          "_currentValue2": Object {},
          "unstable_read": [Function],
        },
        "Provider": [Function],
      },
      "c": Object {
        "Consumer": Object {
          "$$typeof": Symbol(react.context),
          "Consumer": [Circular],
          "Provider": Object {
            "$$typeof": Symbol(react.provider),
            "_context": [Circular],
          },
          "_calculateChangedBits": null,
          "_currentRenderer": Object {},
          "_currentRenderer2": null,
          "_currentValue": Object {},
          "_currentValue2": Object {},
          "unstable_read": [Function],
        },
        "Provider": [Function],
      },
    }
  }
>
  <CProvider>
    <use(AProvider)>
      <AProvider
        c={
          Object {
            "data": "Hello world",
          }
        }
      >
        <use(BProvider)>
          <BProvider
            a={
              Object {
                "data": "Hello world",
              }
            }
            c={
              Object {
                "data": "Hello world",
              }
            }
          >
            <use(WrappedComponent)>
              <WrappedComponent
                a={
                  Object {
                    "data": "Hello world",
                  }
                }
                b={
                  Object {
                    "data": "Hello world",
                  }
                }
                c={
                  Object {
                    "data": "Hello world",
                  }
                }
              >
                <div />
              </WrappedComponent>
            </use(WrappedComponent)>
          </BProvider>
        </use(BProvider)>
      </AProvider>
    </use(AProvider)>
  </CProvider>
</AppProvider>
`;
